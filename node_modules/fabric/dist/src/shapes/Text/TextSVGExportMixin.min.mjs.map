{"version":3,"file":"TextSVGExportMixin.min.mjs","sources":["../../../../src/shapes/Text/TextSVGExportMixin.ts"],"sourcesContent":["import { config } from '../../config';\nimport type { TSVGReviver } from '../../typedefs';\nimport { escapeXml } from '../../util/lang_string';\nimport { colorPropToSVG, createSVGRect } from '../../util/misc/svgParsing';\nimport { hasStyleChanged } from '../../util/misc/textStyles';\nimport { toFixed } from '../../util/misc/toFixed';\nimport { FabricObjectSVGExportMixin } from '../Object/FabricObjectSVGExportMixin';\nimport { type TextStyleDeclaration } from './StyledText';\nimport { JUSTIFY } from '../Text/constants';\nimport type { FabricText, GraphemeBBox } from './Text';\nimport { STROKE, FILL } from '../../constants';\nimport { createRotateMatrix } from '../../util/misc/matrix';\nimport { radiansToDegrees } from '../../util/misc/radiansDegreesConversion';\nimport { Point } from '../../Point';\nimport { matrixToSVG } from '../../util/misc/svgExport';\n\nconst multipleSpacesRegex = /  +/g;\nconst dblQuoteRegex = /\"/g;\n\nfunction createSVGInlineRect(\n  color: string,\n  left: number,\n  top: number,\n  width: number,\n  height: number,\n) {\n  return `\\t\\t${createSVGRect(color, { left, top, width, height })}\\n`;\n}\n\nexport class TextSVGExportMixin extends FabricObjectSVGExportMixin {\n  _toSVG(this: TextSVGExportMixin & FabricText): string[] {\n    const offsets = this._getSVGLeftTopOffsets(),\n      textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n    return this._wrapSVGTextAndBg(textAndBg);\n  }\n\n  toSVG(this: TextSVGExportMixin & FabricText, reviver?: TSVGReviver): string {\n    const textSvg = this._createBaseSVGMarkup(this._toSVG(), {\n        reviver,\n        noStyle: true,\n        withShadow: true,\n      }),\n      path = this.path;\n    if (path) {\n      return (\n        textSvg +\n        path._createBaseSVGMarkup(path._toSVG(), {\n          reviver,\n          withShadow: true,\n          additionalTransform: matrixToSVG(this.calcOwnMatrix()),\n        })\n      );\n    }\n    return textSvg;\n  }\n\n  private _getSVGLeftTopOffsets(this: TextSVGExportMixin & FabricText) {\n    return {\n      textLeft: -this.width / 2,\n      textTop: -this.height / 2,\n      lineTop: this.getHeightOfLine(0),\n    };\n  }\n\n  private _wrapSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    {\n      textBgRects,\n      textSpans,\n    }: {\n      textSpans: string[];\n      textBgRects: string[];\n    },\n  ) {\n    const noShadow = true,\n      textDecoration = this.getSvgTextDecoration(this);\n    return [\n      textBgRects.join(''),\n      '\\t\\t<text xml:space=\"preserve\" ',\n      this.fontFamily\n        ? `font-family=\"${this.fontFamily.replace(dblQuoteRegex, \"'\")}\" `\n        : '',\n      this.fontSize ? `font-size=\"${this.fontSize}\" ` : '',\n      this.fontStyle ? `font-style=\"${this.fontStyle}\" ` : '',\n      this.fontWeight ? `font-weight=\"${this.fontWeight}\" ` : '',\n      textDecoration ? `text-decoration=\"${textDecoration}\" ` : '',\n      this.direction === 'rtl' ? `direction=\"${this.direction}\" ` : '',\n      'style=\"',\n      this.getSvgStyles(noShadow),\n      '\"',\n      this.addPaintOrder(),\n      ' >',\n      textSpans.join(''),\n      '</text>\\n',\n    ];\n  }\n\n  /**\n   * @private\n   * @param {Number} textTopOffset Text top offset\n   * @param {Number} textLeftOffset Text left offset\n   * @return {Object}\n   */\n  private _getSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    textTopOffset: number,\n    textLeftOffset: number,\n  ) {\n    const textSpans: string[] = [],\n      textBgRects: string[] = [];\n    let height = textTopOffset,\n      lineOffset;\n\n    // bounding-box background\n    this.backgroundColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          this.backgroundColor,\n          -this.width / 2,\n          -this.height / 2,\n          this.width,\n          this.height,\n        ),\n      );\n\n    // text and text-background\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineOffset = this._getLineLeftOffset(i);\n      if (this.direction === 'rtl') {\n        lineOffset += this.width;\n      }\n      if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {\n        this._setSVGTextLineBg(\n          textBgRects,\n          i,\n          textLeftOffset + lineOffset,\n          height,\n        );\n      }\n      this._setSVGTextLineText(\n        textSpans,\n        i,\n        textLeftOffset + lineOffset,\n        height,\n      );\n      height += this.getHeightOfLine(i);\n    }\n\n    return {\n      textSpans,\n      textBgRects,\n    };\n  }\n\n  private _createTextCharSpan(\n    this: TextSVGExportMixin & FabricText,\n    char: string,\n    styleDecl: TextStyleDeclaration,\n    left: number,\n    top: number,\n    charBox: GraphemeBBox,\n  ) {\n    const numFractionDigit = config.NUM_FRACTION_DIGITS;\n    const styleProps = this.getSvgSpanStyles(\n        styleDecl,\n        char !== char.trim() || !!char.match(multipleSpacesRegex),\n      ),\n      fillStyles = styleProps ? `style=\"${styleProps}\"` : '',\n      dy = styleDecl.deltaY,\n      dySpan = dy ? ` dy=\"${toFixed(dy, numFractionDigit)}\" ` : '',\n      { angle, renderLeft, renderTop, width } = charBox;\n    let angleAttr = '';\n    if (renderLeft !== undefined) {\n      const wBy2 = width / 2;\n      angle &&\n        (angleAttr = ` rotate=\"${toFixed(radiansToDegrees(angle), numFractionDigit)}\"`);\n      const m = createRotateMatrix({ angle: radiansToDegrees(angle!) });\n      m[4] = renderLeft!;\n      m[5] = renderTop!;\n      const renderPoint = new Point(-wBy2, 0).transform(m);\n      left = renderPoint.x;\n      top = renderPoint.y;\n    }\n\n    return `<tspan x=\"${toFixed(left, numFractionDigit)}\" y=\"${toFixed(\n      top,\n      numFractionDigit,\n    )}\" ${dySpan}${angleAttr}${fillStyles}>${escapeXml(char)}</tspan>`;\n  }\n\n  private _setSVGTextLineText(\n    this: TextSVGExportMixin & FabricText,\n    textSpans: string[],\n    lineIndex: number,\n    textLeftOffset: number,\n    textTopOffset: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      line = this._textLines[lineIndex];\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      style,\n      boxWidth = 0,\n      timeToRender;\n\n    textTopOffset +=\n      (lineHeight * (1 - this._fontSizeFraction)) / this.lineHeight;\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || this.path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i];\n      if (boxWidth === 0) {\n        textLeftOffset += charBox.kernedWidth - charBox.width;\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing or a path, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, true);\n      }\n      if (timeToRender) {\n        style = this._getStyleDeclaration(lineIndex, i);\n        textSpans.push(\n          this._createTextCharSpan(\n            charsToRender,\n            style,\n            textLeftOffset,\n            textTopOffset,\n            charBox,\n          ),\n        );\n        charsToRender = '';\n        actualStyle = nextStyle;\n        if (this.direction === 'rtl') {\n          textLeftOffset -= boxWidth;\n        } else {\n          textLeftOffset += boxWidth;\n        }\n        boxWidth = 0;\n      }\n    }\n  }\n\n  private _setSVGTextLineBg(\n    this: TextSVGExportMixin & FabricText,\n    textBgRects: (string | number)[],\n    i: number,\n    leftOffset: number,\n    textTopOffset: number,\n  ) {\n    const line = this._textLines[i],\n      heightOfLine = this.getHeightOfLine(i) / this.lineHeight;\n    let boxWidth = 0,\n      boxStart = 0,\n      currentColor,\n      lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n    for (let j = 0; j < line.length; j++) {\n      const { left, width, kernedWidth } = this.__charBounds[i][j];\n      currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n      if (currentColor !== lastColor) {\n        lastColor &&\n          textBgRects.push(\n            ...createSVGInlineRect(\n              lastColor,\n              leftOffset + boxStart,\n              textTopOffset,\n              boxWidth,\n              heightOfLine,\n            ),\n          );\n        boxStart = left;\n        boxWidth = width;\n        lastColor = currentColor;\n      } else {\n        boxWidth += kernedWidth;\n      }\n    }\n    currentColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          lastColor,\n          leftOffset + boxStart,\n          textTopOffset,\n          boxWidth,\n          heightOfLine,\n        ),\n      );\n  }\n\n  /**\n   * @deprecated unused\n   */\n  _getSVGLineTopOffset(\n    this: TextSVGExportMixin & FabricText,\n    lineIndex: number,\n  ) {\n    let lineTopOffset = 0,\n      j;\n    for (j = 0; j < lineIndex; j++) {\n      lineTopOffset += this.getHeightOfLine(j);\n    }\n    const lastHeight = this.getHeightOfLine(j);\n    return {\n      lineTop: lineTopOffset,\n      offset:\n        ((this._fontSizeMult - this._fontSizeFraction) * lastHeight) /\n        (this.lineHeight * this._fontSizeMult),\n    };\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(this: TextSVGExportMixin & FabricText, skipShadow?: boolean) {\n    return `${super.getSvgStyles(skipShadow)} white-space: pre;`;\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\n   * @return {String}\n   */\n  getSvgSpanStyles(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n    useWhiteSpace?: boolean,\n  ) {\n    const {\n      fontFamily,\n      strokeWidth,\n      stroke,\n      fill,\n      fontSize,\n      fontStyle,\n      fontWeight,\n      deltaY,\n    } = style;\n\n    const textDecoration = this.getSvgTextDecoration(style);\n\n    return [\n      stroke ? colorPropToSVG(STROKE, stroke) : '',\n      strokeWidth ? `stroke-width: ${strokeWidth}; ` : '',\n      fontFamily\n        ? `font-family: ${\n            !fontFamily.includes(\"'\") && !fontFamily.includes('\"')\n              ? `'${fontFamily}'`\n              : fontFamily\n          }; `\n        : '',\n      fontSize ? `font-size: ${fontSize}px; ` : '',\n      fontStyle ? `font-style: ${fontStyle}; ` : '',\n      fontWeight ? `font-weight: ${fontWeight}; ` : '',\n      textDecoration ? `text-decoration: ${textDecoration}; ` : textDecoration,\n      fill ? colorPropToSVG(FILL, fill) : '',\n      deltaY ? `baseline-shift: ${-deltaY}; ` : '',\n      useWhiteSpace ? 'white-space: pre; ' : '',\n    ].join('');\n  }\n\n  /**\n   * Returns text-decoration property for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @return {String}\n   */\n  getSvgTextDecoration(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n  ) {\n    return (['overline', 'underline', 'line-through'] as const)\n      .filter(\n        (decoration) =>\n          style[\n            decoration.replace('-', '') as\n              | 'overline'\n              | 'underline'\n              | 'linethrough'\n          ],\n      )\n      .join(' ');\n  }\n}\n"],"names":["multipleSpacesRegex","dblQuoteRegex","createSVGInlineRect","color","left","top","width","height","concat","createSVGRect","TextSVGExportMixin","FabricObjectSVGExportMixin","_toSVG","offsets","this","_getSVGLeftTopOffsets","textAndBg","_getSVGTextAndBg","textTop","textLeft","_wrapSVGTextAndBg","toSVG","reviver","textSvg","_createBaseSVGMarkup","noStyle","withShadow","path","additionalTransform","matrixToSVG","calcOwnMatrix","lineTop","getHeightOfLine","_ref","textBgRects","textSpans","textDecoration","getSvgTextDecoration","join","fontFamily","replace","fontSize","fontStyle","fontWeight","direction","getSvgStyles","addPaintOrder","textTopOffset","textLeftOffset","lineOffset","backgroundColor","push","i","len","_textLines","length","_getLineLeftOffset","textBackgroundColor","styleHas","_setSVGTextLineBg","_setSVGTextLineText","_createTextCharSpan","char","styleDecl","charBox","numFractionDigit","config","NUM_FRACTION_DIGITS","styleProps","getSvgSpanStyles","trim","match","fillStyles","dy","deltaY","dySpan","toFixed","angle","renderLeft","renderTop","angleAttr","undefined","wBy2","radiansToDegrees","m","createRotateMatrix","renderPoint","Point","transform","x","y","escapeXml","lineIndex","lineHeight","isJustify","textAlign","includes","JUSTIFY","line","actualStyle","nextStyle","style","timeToRender","charsToRender","boxWidth","_fontSizeFraction","charSpacing","__charBounds","kernedWidth","_reSpaceAndTab","test","getCompleteStyleDeclaration","hasStyleChanged","_getStyleDeclaration","leftOffset","heightOfLine","currentColor","boxStart","lastColor","getValueOfPropertyAt","j","_getSVGLineTopOffset","lineTopOffset","lastHeight","offset","_fontSizeMult","skipShadow","super","useWhiteSpace","strokeWidth","stroke","fill","colorPropToSVG","STROKE","FILL","filter","decoration"],"mappings":"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"}